[project]
# PEP 621 project metadata
# See https://www.python.org/dev/peps/pep-0621/
authors = [
    {name = "Frost Ming", email = "mianghong@gmail.com"},
]
dynamic = ["version"]
requires-python = ">=3.7"
license = {text = "MIT"}
dependencies = [
    "blinker",
    "certifi",
    "packaging>=20.9,!=22.0",
    "platformdirs",
    "rich>=12.3.0",
    "virtualenv>=20",
    "pyproject-hooks",
    "requests-toolbelt",
    "unearth>=0.7",
    "findpython>=0.2.2",
    "tomlkit>=0.11.1,<1",
    "shellingham>=1.3.2",
    "python-dotenv>=0.15",
    "resolvelib>=0.9,<0.10",
    "installer<0.7,>=0.6",
    "cachecontrol[filecache]>=0.12.11",
    "tomli>=1.1.0; python_version < \"3.11\"",
    "typing-extensions; python_version < \"3.8\"",
    "importlib-metadata>=3.6; python_version < \"3.10\"",
]
name = "pdm"
description = "A modern Python package and dependency manager supporting the latest PEP standards"
readme = "README.md"
keywords = ["packaging", "dependency", "workflow"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
Homepage = "https://pdm.fming.dev"
Repository = "https://github.com/pdm-project/pdm"
Documentation = "https://pdm.fming.dev"
Changelog = "https://pdm.fming.dev/latest/dev/changelog/"

[project.optional-dependencies]
pytest = [
    "pytest",
    "pytest-mock",
]

[project.scripts]
pdm = "pdm.core:main"

[tool.pdm.version]
source = "scm"
write_to = "pdm/models/VERSION"

[tool.pdm.build]
excludes = ["./**/.git"]
package-dir = "src"
includes = ["src/pdm"]
source-includes = ["tests", "CHANGELOG.md", "LICENSE", "README.md"]
# editables backend doesn't work well with namespace packages
editable-backend = "path"

[tool.pdm.scripts]
pre_release = "python tasks/max_versions.py"
release = "python tasks/release.py"
test = "pytest"
tox = "tox"
doc = {shell = "cd docs && mkdocs serve", help = "Start the dev server for doc preview"}
lint = "pre-commit run --all-files"
complete = {call = "tasks.complete:main", help = "Create autocomplete files for bash and fish"}

[tool.pdm.dev-dependencies]
test = [
    "pdm[pytest]",
    "pytest-cov",
    "pytest-xdist>=1.31.0",
    "pytest-rerunfailures>=10.2",
]
tox = [
    "tox",
    "tox-pdm>=0.5",
]
doc = [
    "mkdocs>=1.1",
    "mkdocs-material>=7.3",
    "mkdocstrings[python]>=0.18",
    "markdown-include>=0.5.1",
    "mike>=1.1.2",
    "setuptools>=62.3.3",
    "markdown-exec>=0.7.0",
]
workflow = [
    "pdm-pep517>=1.0.0,<2.0.0",
    "parver>=0.3.1",
    "towncrier>=20",
    "pycomplete~=0.3"
]

[tool.black]
line-length = 120
target-version = ["py37", "py38", "py39", "py310"]


[tool.ruff]
line-length = 120
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  "F",    # pyflakes
  "PGH",  # pygrep-hooks
  "RUF",  # ruff
  "W",    # pycodestyle
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
extend-ignore = ["B019"]
src = ["src"]
extend-exclude = ["tests/fixtures"]
target-version = "py37"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["pdm"]

[tool.towncrier]
package = "pdm"
filename = "CHANGELOG.md"
issue_format = "[#{issue}](https://github.com/pdm-project/pdm/issues/{issue})"
directory = "news/"
title_format = "Release v{version} ({project_date})"
template = "news/towncrier_template.md"
underlines = "-~^"

  [[tool.towncrier.type]]
  directory = "break"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features & Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "bugfix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "doc"
  name = "Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "dep"
  name = "Dependencies"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "removal"
  name = "Removals and Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "misc"
  name = "Miscellany"
  showcontent = true

[build-system]
requires = ["pdm-pep517>=1.0"]
build-backend = "pdm.pep517.api"

[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning"
]
markers = [
    "network: Tests that require network",
    "integration: Run with all Python versions",
    "path: Tests that compare with the system paths",
    "deprecated: Tests about deprecated features",
]
addopts = "-r aR"
testpaths = [
    "tests/",
]

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^.*: add", group = "Added"},
    { message = "^.*: support", group = "Added"},
    { message = "^.*: remove", group = "Removed"},
    { message = "^.*: delete", group = "Removed"},
    { message = "^test", group = "Fixed"},
    { message = "^fix", group = "Fixed"},
    { message = "^.*: fix", group = "Fixed"},
    { message = "^.*", group = "Changed"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"